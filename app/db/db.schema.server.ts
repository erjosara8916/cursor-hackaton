import { relations } from "drizzle-orm";
import { integer, pgTable, text } from "drizzle-orm/pg-core";

import { DEFAULT_COLUMNS } from "./db.constants.server";

export const customersTable = pgTable("customers", {
  ...DEFAULT_COLUMNS,

  email: text("email").notNull().unique(),
  firstName: text("first_name").notNull(),
  lastName: text("last_name").notNull(),
});

export const socialProfilesTable = pgTable("social_profiles", {
  ...DEFAULT_COLUMNS,

  /** A URL to the social profile of the customer. */
  url: text("url").notNull().unique(),

  // Relationships
  /**
   * A social profile must be associated to a customer, so we can't have a
   * social profile without a customer
   */
  customerId: text("customer_id")
    .notNull()
    .references(() => customersTable.id),
});

export const customersTableRelations = relations(
  customersTable,
  ({ many }) => ({
    /** A customer can have many orders */
    orders: many(ordersTable),
    /** A customer can have many social profiles */
    profiles: many(socialProfilesTable),
  }),
);

export const socialProfilesTableRelations = relations(
  socialProfilesTable,
  ({ one }) => ({
    /** A social profile belongs to a customer */
    customer: one(customersTable, {
      fields: [socialProfilesTable.customerId],
      references: [customersTable.id],
    }),
  }),
);

export const productsTable = pgTable("products", {
  // 3rd party scraped fields
  external_canonicalUrl: text("external_canonical_url").notNull().unique(),
  external_id: integer("external_id").notNull().unique(),

  ...DEFAULT_COLUMNS,

  name: text("name").notNull(),
});

export const productVariantsTable = pgTable("product_variants", {
  // 3rd party scraped fields
  external_id: integer("external_id").notNull().unique(),

  ...DEFAULT_COLUMNS,

  price: integer("price").notNull(),

  depth: integer("depth"),
  height: integer("height"),
  name: text("name"),
  weight: integer("weight"),
  width: integer("width"),

  // Relationships
  /**
   * A product variant must be associated to a product, so we can't have a
   * product variant without a product
   */
  productId: text("product_id")
    .notNull()
    .references(() => productsTable.id),
});

export const productsTableRelations = relations(productsTable, ({ many }) => ({
  /** A product can have many variants */
  variants: many(productVariantsTable),
}));

export const productVariantsTableRelations = relations(
  productVariantsTable,
  ({ one }) => ({
    /** A product variant belongs to a product */
    product: one(productsTable, {
      fields: [productVariantsTable.productId],
      references: [productsTable.id],
    }),
  }),
);

export const ordersTable = pgTable("orders", {
  ...DEFAULT_COLUMNS,

  /**
   * The value will be generated by the server. It will be used to identify the
   * order in the system.
   */
  code: text("code").notNull().unique(),

  // Relationships
  /**
   * An order belongs to a customer, so we can't have an order without a
   * customer
   */
  customerId: text("customer_id")
    .notNull()
    .references(() => customersTable.id),
});

export const ordersTableRelations = relations(ordersTable, ({ one }) => ({
  /** An order belongs to a customer */
  customer: one(customersTable, {
    fields: [ordersTable.customerId],
    references: [customersTable.id],
  }),
}));
